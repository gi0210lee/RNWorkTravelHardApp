{"version":3,"sources":["colors.js","context/context.js","components/TodoInsert.js","constants/constants.js","components/TodoListItem.js","components/TodoList.js","components/TodoHeader.js","App.js"],"names":["theme","TextContext","createContext","TextContextProvider","children","useState","text","setText","Provider","value","TodosContext","TodosContextProvider","toDos","setTodos","useTodosContext","useContext","WorkingContext","WorkingContextProvider","working","setWorking","useWorkingContext","TodoInsert","onAddToDo","newToDos","Date","now","check","saveToDos","s","JSON","stringify","AsyncStorage","setItem","e","View","TextInput","onSubmitEditing","onChangeText","payload","returnKeyType","placeholder","style","styles","input","StyleSheet","create","backgroundColor","paddingVertical","paddingHorizontal","borderRadius","marginVertical","fontSize","TodoListItem","myKey","edit","setEdit","completeTodo","key","deleteTodo","toDo","TouchableOpacity","onPress","Fontisto","name","size","color","Text","toDoText","toDoEditText","MaterialIcons","FontAwesome5","Platform","OS","confirm","Alert","alert","marginBottom","flexDirection","alignItems","justifyContent","fontWeight","TodoList","useEffect","console","log","loadToDos","getItem","parse","ScrollView","Object","keys","map","TodoHeader","loadHeader","saveHeader","header","btnText","marginTop","App","container","StatusBar","flex"],"mappings":"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","file":"static/js/app.ac641908.chunk.js","sourcesContent":["export const theme = {\r\n    bg: \"black\",\r\n    gray: \"#3A3D40\",\r\n    toDoBg: '#5C5C60',\r\n}","import { useState, createContext, useContext } from 'react';\r\n\r\nconst TextContext = createContext();\r\nexport const TextContextProvider = ({ children }) => {\r\n    const [text, setText] = useState(\"\");\r\n    return (\r\n        <TextContext.Provider value={{ text, setText }}>\r\n            {children}\r\n        </TextContext.Provider>)\r\n}\r\nexport const useTextContext = () => {\r\n    return useContext(TextContext)\r\n}\r\n\r\nconst TodosContext = createContext();\r\nexport const TodosContextProvider = ({ children }) => {\r\n    const [toDos, setTodos] = useState({});\r\n    return (\r\n        <TodosContext.Provider value={{ toDos, setTodos }}>\r\n            {children}\r\n        </TodosContext.Provider>)\r\n}\r\nexport const useTodosContext = () => {\r\n    return useContext(TodosContext)\r\n}\r\n\r\nconst WorkingContext = createContext()\r\nexport function WorkingContextProvider({ children }) {\r\n    const [working, setWorking] = useState(true);\r\n    return (\r\n        <WorkingContext.Provider value={{ working, setWorking }}>\r\n            {children}\r\n        </WorkingContext.Provider>\r\n    )\r\n}\r\nexport function useWorkingContext() {\r\n    return useContext(WorkingContext)\r\n}","import React from 'react'\r\nimport {\r\n    StyleSheet,\r\n    View,\r\n    TextInput,\r\n} from 'react-native';\r\nimport { useTextContext, useTodosContext, useWorkingContext } from '../context/context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { STORAGE_KEY } from '../constants/constants';\r\n\r\nexport default function TodoInsert() {\r\n    const { working } = useWorkingContext();\r\n    const { text, setText } = useTextContext();\r\n    const { toDos, setTodos } = useTodosContext();\r\n\r\n    const onChangeText = (payload) => setText(payload);\r\n    const onAddToDo = async () => {\r\n        if (text === \"\") {\r\n            return;\r\n        }\r\n\r\n        const newToDos = {\r\n            ...toDos,\r\n            [Date.now()]: { check, text, working }\r\n        };\r\n        setTodos(newToDos);\r\n        await saveToDos(newToDos);\r\n        setText(\"\");\r\n    }\r\n    const saveToDos = async (toDos) => {\r\n        try {\r\n            const s = JSON.stringify(toDos);\r\n            await AsyncStorage.setItem(STORAGE_KEY, s);\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View>\r\n            <TextInput\r\n                onSubmitEditing={onAddToDo}\r\n                onChangeText={onChangeText}\r\n                value={text}\r\n                returnKeyType=\"done\"\r\n                placeholder={working ? \"Add a To Do\" : \"Where do you want to go?\"}\r\n                style={styles.input}\r\n            />\r\n        </View>\r\n\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    input: {\r\n        backgroundColor: \"white\",\r\n        paddingVertical: 15,\r\n        paddingHorizontal: 20,\r\n        borderRadius: 30,\r\n        marginVertical: 10,\r\n        fontSize: 18,\r\n    }\r\n});","export const STORAGE_KEY = \"@toDos\"\r\nexport const HEADER_KEY = \"@Header\"","import React, { useState } from 'react'\r\nimport { theme } from './../colors';\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    TextInput,\r\n    View,\r\n    TouchableOpacity,\r\n    Alert,\r\n    Platform\r\n} from 'react-native';\r\nimport { Fontisto, FontAwesome5, MaterialIcons } from '@expo/vector-icons';\r\nimport { useTodosContext, useWorkingContext } from '../context/context';\r\nimport { STORAGE_KEY } from '../constants/constants';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\n\r\nexport default function TodoListItem({ myKey }) {\r\n    const [edit, setEdit] = useState(false);\r\n    const { toDos, setTodos } = useTodosContext();\r\n\r\n    const saveToDos = async (toDos) => {\r\n        try {\r\n            const s = JSON.stringify(toDos);\r\n            await AsyncStorage.setItem(STORAGE_KEY, s);\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    const completeTodo = async (key) => {\r\n        const newToDos = {\r\n            ...toDos\r\n        };\r\n        newToDos[key].check = !newToDos[key].check;\r\n        setTodos(newToDos);\r\n        await saveToDos(newToDos);\r\n    }\r\n\r\n    const updateTodo = async (key) => {\r\n        const newToDos = {\r\n            ...toDos\r\n        };\r\n        newToDos[key].check = !newToDos[key].check;\r\n        setTodos(newToDos);\r\n        await saveToDos(newToDos);\r\n    }\r\n\r\n    const deleteTodo = async (key) => {\r\n        const newToDos = {\r\n            ...toDos\r\n        };\r\n        delete newToDos[key]\r\n        setTodos(newToDos);\r\n        await saveToDos(newToDos);\r\n    }\r\n    const onCompelteTodo = (key) => {\r\n        completeTodo(key)\r\n    };\r\n    const onUpdateTodo = (key) => {\r\n        updateTodo(key)\r\n    };\r\n    const onDeleteToDo = (key) => {\r\n        if (Platform.OS === 'web') {\r\n            const result = confirm(\"are you sure\");\r\n            if (result) {\r\n                deleteTodo(key)\r\n            }\r\n        } else {\r\n            Alert.alert(\r\n                \"delete to do?\",\r\n                \"Are you sure\",\r\n                [\r\n                    {\r\n                        text: \"Cancel\"\r\n                    },\r\n                    {\r\n                        text: \"Ok\", onPress: () => deleteTodo(key)\r\n                    }\r\n                ]\r\n            );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.toDo} key={myKey}>\r\n            <TouchableOpacity onPress={() => onCompelteTodo(myKey)}>\r\n                {toDos[myKey].check ?\r\n                    <Fontisto name=\"checkbox-active\" size={24} color={theme.gray} /> :\r\n                    <Fontisto name=\"checkbox-passive\" size={24} color={theme.gray} />\r\n                }\r\n            </TouchableOpacity >\r\n\r\n            {edit ? (\r\n                <View>\r\n                    <TextInput\r\n                        // onSubmitEditing={onAddToDo}\r\n                        // onChangeText={onChangeText}\r\n                        value={toDos[myKey].text}\r\n                        returnKeyType=\"done\"\r\n                        placeholder=\"\"\r\n                        style={styles.input}\r\n                    />\r\n\r\n                </View>\r\n            )\r\n                : (\r\n                    <Text style={styles.toDoText}>\r\n                        {toDos[myKey].text}\r\n                    </Text>\r\n                )\r\n            }\r\n            <TouchableOpacity onPress={() => setEdit(!edit)}>\r\n                {edit ? (\r\n                    <View style={styles.toDoEditText}>\r\n                        <MaterialIcons name=\"check-circle\" size={24} color=\"black\" />\r\n                        <MaterialIcons name=\"cancel\" size={24} color=\"black\" />\r\n                    </View>\r\n                ) : (\r\n                    <FontAwesome5 name=\"edit\" size={24} color={theme.gray} />\r\n                )}\r\n            </TouchableOpacity >\r\n            <TouchableOpacity onPress={() => onDeleteToDo(myKey)}>\r\n                <FontAwesome5 name=\"trash-alt\" size={24} color={theme.gray} />\r\n            </TouchableOpacity >\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    toDo: {\r\n        backgroundColor: theme.toDoBg,\r\n        marginBottom: 10,\r\n        paddingVertical: 20,\r\n        paddingHorizontal: 40,\r\n        borderRadius: 15,\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    toDoText: {\r\n        color: \"white\",\r\n        fontSize: 16,\r\n        fontWeight: \"500\",\r\n    },\r\n    toDoEditText: {\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"space-between\",\r\n    },\r\n    input: {\r\n        color: \"black\",\r\n        backgroundColor: \"white\",\r\n        fontSize: 16,\r\n        fontWeight: \"500\",\r\n    }\r\n});","import React, { useEffect } from 'react'\r\nimport {\r\n    ScrollView\r\n} from 'react-native';\r\nimport TodoListItem from './TodoListItem'\r\nimport { useTodosContext, useWorkingContext } from '../context/context';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { STORAGE_KEY } from '../constants/constants';\r\n\r\nexport default function TodoList() {\r\n    const { working } = useWorkingContext();\r\n    const { toDos, setTodos } = useTodosContext();\r\n\r\n    useEffect(() => {\r\n        console.log('TodoList useEffect')\r\n        loadToDos();\r\n    }, [])\r\n\r\n    const loadToDos = async () => {\r\n        try {\r\n            const s = await AsyncStorage.getItem(STORAGE_KEY);\r\n            if (s) {\r\n                setTodos(JSON.parse(s));\r\n            }\r\n            // console.log(JSON.parse(s));\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    return (\r\n        <ScrollView>\r\n            {toDos && Object.keys(toDos).map((key) => (\r\n                toDos[key].working === working ?\r\n                    <TodoListItem key={key} myKey={key} />\r\n                    : null\r\n            ))\r\n            }\r\n        </ScrollView >\r\n    )\r\n}","import React, { useEffect } from 'react'\r\nimport {\r\n    StyleSheet,\r\n    Text,\r\n    View,\r\n    TouchableOpacity,\r\n} from 'react-native';\r\nimport { useWorkingContext } from '../context/context';\r\nimport { theme } from './../colors';\r\nimport AsyncStorage from '@react-native-async-storage/async-storage';\r\nimport { HEADER_KEY } from '../constants/constants';\r\n\r\nexport default function TodoHeader() {\r\n    const { working, setWorking } = useWorkingContext();\r\n\r\n    useEffect(() => {\r\n        console.log('TodoList TodoHeader')\r\n        loadHeader();\r\n    }, [])\r\n\r\n    const onTravel = () => {\r\n        setWorking(false)\r\n        saveHeader(false)\r\n    };\r\n    const onWork = () => {\r\n        setWorking(true)\r\n        saveHeader(true)\r\n    };\r\n\r\n    const loadHeader = async () => {\r\n        try {\r\n            const s = await AsyncStorage.getItem(HEADER_KEY);\r\n            setWorking(JSON.parse(s));\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    const saveHeader = async (working) => {\r\n        try {\r\n            const s = JSON.stringify(working);\r\n            await AsyncStorage.setItem(HEADER_KEY, s);\r\n        } catch (e) {\r\n            //\r\n        }\r\n    }\r\n\r\n    return (\r\n        <View style={styles.header}>\r\n            <TouchableOpacity onPress={onWork}>\r\n                <Text style={{ ...styles.btnText, color: working ? \"white\" : theme.gray }}>Work</Text>\r\n            </TouchableOpacity>\r\n            <TouchableOpacity onPress={onTravel}>\r\n                <Text style={{ ...styles.btnText, color: !working ? \"white\" : theme.gray }}>Travel</Text>\r\n            </TouchableOpacity>\r\n        </View>\r\n    )\r\n}\r\n\r\nconst styles = StyleSheet.create({\r\n    header: {\r\n        justifyContent: \"space-between\",\r\n        flexDirection: \"row\",\r\n        marginTop: 100,\r\n    },\r\n    btnText: {\r\n        fontSize: 38,\r\n        fontWeight: \"600\",\r\n    },\r\n});\r\n","// 마지막 탭 유지\n// 완료, 수정 버튼\n// 완료 표시\n// 수정 시 텍스트인풋으로\nimport react from 'react';\nimport { StatusBar } from 'expo-status-bar';\nimport {\n  StyleSheet,\n  View\n} from 'react-native';\nimport { theme } from './colors';\nimport TodoInsert from './components/TodoInsert';\nimport TodoList from './components/TodoList';\nimport { TextContextProvider, TodosContextProvider, WorkingContextProvider } from './context/context';\nimport TodoHeader from './components/TodoHeader';\n\nexport default function App() {\n  return (\n    <View style={styles.container}>\n      <StatusBar style=\"auto\" />\n      <WorkingContextProvider>\n        <TodoHeader />\n        <TodosContextProvider>\n\n          <TextContextProvider>\n            {/* Insert */}\n            <TodoInsert />\n          </TextContextProvider>\n\n          {/* List */}\n          <TodoList />\n\n        </TodosContextProvider>\n      </WorkingContextProvider>\n    </View >\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: theme.bg,\n    paddingHorizontal: 20,\n  }\n});\n"],"sourceRoot":""}